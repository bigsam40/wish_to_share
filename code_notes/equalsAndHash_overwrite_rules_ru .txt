Переопределяя метод equals(), обязательно соблюдай эти требования:

1. Рефлексивность.

Любой объект должен быть equals() самому себе.
Мы уже учли это требование. В нашем методе указано:

if (this == o) return true;
2. Симметричность.

Если a.equals(b) == true, то и b.equals(a) должно возвращать true.
Этому требованию наш метод тоже соответствует.

3. Транзитивность.

Если два объекта равны какому-то третьему объекту, значит, они должны быть равны друг и другу.
Если a.equals(b) == true и a.equals(c) == true, значит проверка b.equals(c) тоже должна возвращать true.

4. Постоянность.

Результаты работы equals() должны меняться только при изменении входящих в него полей. 
Если данные двух объектов не менялись, результаты проверки на equals() должны быть всегда одинаковыми.

5. Неравенство с null.

Для любого объекта проверка a.equals(null) должна возвращать false
Это не просто набор каких-то «полезных рекомендаций», а именно жесткий контракт методов, прописанный в документации Oracle
_______________________________

Для метода hashCode() есть официальные требования, прописанные в документации Oracle:

1. Если два объекта равны (т.е. метод equals() возвращает true), у них должен быть одинаковый хэш-код.
Иначе наши методы будут лишены смысла. Проверка по hashCode(), как мы и сказали, должна идти первой для повышения быстродействия. 
Если хэш-коды будут разными, проверка вернет false, хотя объекты на самом деле равны (согласно нашему определению в методе equals()).

2. Если метод hashCode() вызывается несколько раз на одном и том же объекте, каждый раз он должен возвращать одно и то же число.

3. Правило 1 не работает в обратную сторону. Одинаковый хэш-код может быть у двух разных объектов.